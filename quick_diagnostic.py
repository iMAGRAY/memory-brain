#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI Memory Service
"""
import socket
import requests
import json

def check_port():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ 8080"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(3)
        result = sock.connect_ex(('127.0.0.1', 8080))
        sock.close()
        
        if result == 0:
            print("‚úÖ –ü–æ—Ä—Ç 8080 –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå –ü–æ—Ä—Ç 8080 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (error {result})")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞: {e}")
        return False

def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç API"""
    if not check_port():
        return
        
    # –¢–µ—Å—Ç 1: Health endpoint —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º timeout 
    try:
        response = requests.get("http://127.0.0.1:8080/health", timeout=15)
        print(f"Health: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('service', 'unknown')}")
            print(f"üìä Memory stats: {data.get('memory_stats', {})}")
        else:
            print(f"‚ùå Health check failed: {response.text[:100]}")
            return
    except Exception as e:
        print(f"‚ùå Health endpoint error: {e}")
        return
        
    # –¢–µ—Å—Ç 2: Search endpoint
    try:
        response = requests.get(
            "http://127.0.0.1:8080/search",
            params={"query": "memory", "limit": 2},
            timeout=15
        )
        print(f"Search: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            total = data.get('total', 0)
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total}")
            
            if total > 0:
                print(f"‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                for i, result in enumerate(data.get('results', [])[:2]):
                    content = result.get('content', 'No content')[:60] + "..."
                    print(f"  {i+1}: {content}")
            else:
                print(f"‚ö†Ô∏è  –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º")
                
        else:
            print(f"‚ùå Search failed: {response.status_code}")
            print(f"Error: {response.text[:200]}")
            
    except Exception as e:
        print(f"‚ùå Search endpoint error: {e}")

if __name__ == "__main__":
    print("üîç Quick AI Memory Service Diagnostic")
    print("=" * 40)
    quick_test()