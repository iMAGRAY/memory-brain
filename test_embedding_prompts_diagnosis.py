#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
–≤ EmbeddingGemma –∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞
"""
import asyncio
import aiohttp
import json
import sys
from sentence_transformers import SentenceTransformer

async def test_embedding_prompts():
    """–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ embedding server –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–º–ø—Ç—ã"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Prompts –≤ Embedding Service")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ EmbeddingGemma
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ EmbeddingGemma...")
    model_path = "C:\\Models\\ai-memory-service\\models\\embeddinggemma-300m"
    
    try:
        model = SentenceTransformer(model_path)
        has_encode_query = hasattr(model, 'encode_query')
        has_encode_document = hasattr(model, 'encode_document')
        
        print(f"   hasattr(model, 'encode_query'): {has_encode_query}")
        print(f"   hasattr(model, 'encode_document'): {has_encode_document}")
        
        if has_encode_query:
            print("   ‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã")
        else:
            print("   üìù –ú–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fallback –º–µ—Ç–æ–¥—ã —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º embeddings —á–µ—Ä–µ–∑ HTTP API —Å —Ä–∞–∑–Ω—ã–º–∏ task_type
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP API —Å —Ä–∞–∑–Ω—ã–º–∏ task_type...")
    
    test_text = "How to optimize memory usage in AI systems?"
    
    async with aiohttp.ClientSession() as session:
        # –¢–µ—Å—Ç query embedding
        print(f"\n   üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º query: '{test_text[:50]}...'")
        
        async with session.post(
            "http://localhost:8090/embed",
            json={"text": test_text, "task_type": "query"},
            headers={"Content-Type": "application/json"}
        ) as response:
            if response.status == 200:
                query_result = await response.json()
                query_embedding = query_result['embedding']
                print(f"   ‚úÖ Query embedding: dimension={len(query_embedding)}")
                print(f"      First 3 values: {query_embedding[:3]}")
            else:
                print(f"   ‚ùå Query embedding failed: {response.status}")
                return False
        
        # –¢–µ—Å—Ç document embedding
        doc_text = "Memory optimization in AI involves using efficient data structures and algorithms to minimize RAM usage while maintaining performance."
        print(f"\n   üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º document: '{doc_text[:50]}...'")
        
        async with session.post(
            "http://localhost:8090/embed", 
            json={"text": doc_text, "task_type": "document"},
            headers={"Content-Type": "application/json"}
        ) as response:
            if response.status == 200:
                doc_result = await response.json()
                doc_embedding = doc_result['embedding']
                print(f"   ‚úÖ Document embedding: dimension={len(doc_embedding)}")
                print(f"      First 3 values: {doc_embedding[:3]}")
            else:
                print(f"   ‚ùå Document embedding failed: {response.status}")
                return False
        
        # –¢–µ—Å—Ç general embedding (–±–µ–∑ –ø—Ä–æ–º–ø—Ç–æ–≤)
        async with session.post(
            "http://localhost:8090/embed",
            json={"text": test_text, "task_type": "general"},
            headers={"Content-Type": "application/json"}
        ) as response:
            if response.status == 200:
                general_result = await response.json()
                general_embedding = general_result['embedding']
                print(f"   ‚úÖ General embedding: dimension={len(general_embedding)}")
                print(f"      First 3 values: {general_embedding[:3]}")
            else:
                print(f"   ‚ùå General embedding failed: {response.status}")
                return False
    
    # 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    print("\n3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏...")
    
    # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    query_vs_general_diff = abs(query_embedding[0] - general_embedding[0])
    doc_vs_general_diff = abs(doc_embedding[0] - general_embedding[0])
    query_vs_doc_diff = abs(query_embedding[0] - doc_embedding[0])
    
    print(f"   üìä –†–∞–∑–Ω–æ—Å—Ç—å query vs general: {query_vs_general_diff:.6f}")
    print(f"   üìä –†–∞–∑–Ω–æ—Å—Ç—å doc vs general: {doc_vs_general_diff:.6f}")
    print(f"   üìä –†–∞–∑–Ω–æ—Å—Ç—å query vs doc: {query_vs_doc_diff:.6f}")
    
    if query_vs_general_diff > 0.001 or doc_vs_general_diff > 0.001:
        print("   ‚úÖ –•–û–†–û–®–û: –ü—Ä–æ–º–ø—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Ä–∞–∑–ª–∏—á–∞—é—â–∏–µ—Å—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∏!")
    else:
        print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–æ–º–ø—Ç—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏!")
        
    print("\n" + "=" * 60)
    print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    return True

if __name__ == "__main__":
    try:
        asyncio.run(test_embedding_prompts())
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)