#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ embedding_server.py
"""

import sys
import os
import time
import numpy as np
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

def test_improvements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô EMBEDDING SERVER")
    print("=" * 60)
    
    from embedding_server import EmbeddingService
    from collections import OrderedDict
    import hashlib
    import torch
    
    # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    model_path = r'C:\Models\ai-memory-service\models\embeddinggemma-300m'
    
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        service = EmbeddingService(model_path=model_path, cache_size=10)
        print("   ‚úÖ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è race condition –≤ –∫–µ—à–µ
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞ (move_to_end)...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ cache —ç—Ç–æ OrderedDict
        assert isinstance(service.cache, OrderedDict), "–ö–µ—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å OrderedDict"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ move_to_end
        test_key = "test_key"
        test_value = np.array([1, 2, 3])
        service.cache[test_key] = test_value
        service.cache.move_to_end(test_key)
        print("   ‚úÖ OrderedDict.move_to_end —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å –∫–µ—à–µ–º: {e}")
        return False
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (blake2b)
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π –∫–µ—à–∞...")
    try:
        test_text = "Test text for hashing"
        prompt = "task: search result | query: "
        cache_data = f"{prompt}{test_text}|dim:768|v:1.0"
        
        # –ó–∞–º–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å blake2b
        start = time.perf_counter()
        for _ in range(10000):
            hashlib.blake2b(cache_data.encode('utf-8'), digest_size=32).hexdigest()
        blake2b_time = time.perf_counter() - start
        
        # –ó–∞–º–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å sha256
        start = time.perf_counter()
        for _ in range(10000):
            hashlib.sha256(cache_data.encode('utf-8')).hexdigest()
        sha256_time = time.perf_counter() - start
        
        speedup = sha256_time / blake2b_time
        print(f"   ‚úÖ blake2b –±—ã—Å—Ç—Ä–µ–µ SHA256 –≤ {speedup:.2f} —Ä–∞–∑")
        print(f"      blake2b: {blake2b_time:.3f}s, SHA256: {sha256_time:.3f}s")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ encode_query –∏ encode_document
        if hasattr(service.model, 'encode_query'):
            print("   ‚úÖ –ú–æ–¥–µ–ª—å –∏–º–µ–µ—Ç –Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ encode_query")
        else:
            print("   ‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ encode_query, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
            
        if hasattr(service.model, 'encode_document'):
            print("   ‚úÖ –ú–æ–¥–µ–ª—å –∏–º–µ–µ—Ç –Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ encode_document")
        else:
            print("   ‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ encode_document, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–æ–≤
        test_query = "test query"
        test_doc = "test document"
        
        query_emb = service.encode_query(test_query)
        doc_emb = service.encode_document(test_doc)
        
        print(f"   ‚úÖ Query embedding shape: {query_emb.shape}")
        print(f"   ‚úÖ Document embedding shape: {doc_emb.shape}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
        query_norm = np.linalg.norm(query_emb)
        doc_norm = np.linalg.norm(doc_emb)
        print(f"   ‚úÖ Query norm: {query_norm:.4f} (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ~1.0)")
        print(f"   ‚úÖ Document norm: {doc_norm:.4f} (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ~1.0)")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å –º–µ—Ç–æ–¥–∞–º–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        assert hasattr(service, 'model') and service.model is not None
        print("   ‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        print(f"   ‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞: {service.device}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é: {e}")
        return False
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ batch_size
    print("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã batch_size...")
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ batch_size
        texts = ["text1", "text2", "text3", "text4", "text5"]
        
        # –° —É–∫–∞–∑–∞–Ω–Ω—ã–º batch_size
        emb1 = service.encode_query(texts, batch_size=2)
        print(f"   ‚úÖ Batch encoding —Å batch_size=2: shape {emb1.shape}")
        
        # –° batch_size=None (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å default)
        emb2 = service.encode_query(texts, batch_size=None)
        print(f"   ‚úÖ Batch encoding —Å batch_size=None: shape {emb2.shape}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        if np.allclose(emb1, emb2, atol=1e-5):
            print("   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç batch_size")
        else:
            print("   ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö batch_size")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å batch_size: {e}")
        return False
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API (—Å–∏–º—É–ª—è—Ü–∏—è)
    print("\n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        long_text = "a" * 100001  # –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ –≤ 100000
        try:
            _ = service.encode_query(long_text)
            print("   ‚ö†Ô∏è –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É (–æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –º–æ–¥–µ–ª–∏)")
        except ValueError as e:
            print(f"   ‚úÖ –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        try:
            result = service.encode_query("")
            if result is not None:
                print("   ‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        except Exception:
            print("   ‚úÖ –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É")
            
        print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
    print("=" * 60)
    
    improvements = [
        "‚úÖ Race condition –≤ –∫–µ—à–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω (move_to_end)",
        "‚úÖ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (blake2b)",
        "‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–∏",
        "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ª—É—á—à–µ–Ω–∞",
        "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä batch_size —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        "‚úÖ –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    ]
    
    for improvement in improvements:
        print(f"  {improvement}")
    
    print("\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–´!")
    print("üìä –ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    
    return True

if __name__ == "__main__":
    success = test_improvements()
    sys.exit(0 if success else 1)