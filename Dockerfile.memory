# syntax=docker/dockerfile:1
# Rust Memory Server - Production optimized build
FROM rust:1.83-slim AS builder

# Install dependencies in single layer
RUN apt-get update && apt-get install -y \
    pkg-config libssl-dev build-essential curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app
COPY Cargo.toml Cargo.lock ./
COPY src/ ./src/
COPY benches/ ./benches/
COPY tests/ ./tests/

# Build release binary
RUN cargo build --release --bin memory-server

# Runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies and create user in single layer
RUN apt-get update && apt-get install -y \
    ca-certificates curl \
    && rm -rf /var/lib/apt/lists/* \
    && groupadd -r appuser \
    && useradd --no-log-init -r -g appuser appuser \
    && mkdir -p /app/{data,logs,cache,config} \
    && chown -R appuser:appuser /app

# Copy binary from builder
COPY --from=builder /app/target/release/memory-server /app/
COPY --chown=appuser:appuser config/ /app/config/

USER appuser
WORKDIR /app

# Security and metadata labels
LABEL maintainer="ai-memory-service@example.com"
LABEL version="1.0"
LABEL description="Rust AI Memory Service"
LABEL security.no-new-privileges="true"

EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=90s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

CMD ["./memory-server"]