//! Autonomous Memory Distillation Engine
//! 
//! –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏ –ø–∞–º—è—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPT-5-nano –¥–ª—è:
//! - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–π –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –≤ –∏–Ω—Å–∞–π—Ç—ã
//! - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
//! - –ï–∂–µ–º–µ—Å—è—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–º—è—Ç–∏
//! - –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

use crate::{
    orchestrator::MemoryOrchestrator,
    memory::MemoryService,
    types::MemoryCell,
};
use anyhow::{anyhow, Result};
use chrono::{DateTime, Duration, Utc, Datelike, Timelike};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::sync::Arc;
use tokio::sync::{RwLock, Mutex};
use tokio::time::{interval, Duration as TokioDuration, sleep};
use tokio::sync::broadcast;
use tracing::{debug, error, info, warn};
use uuid::Uuid;

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DistillationConfig {
    /// –í–∫–ª—é—á–∏—Ç—å –ª–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏—é
    pub enabled: bool,
    /// –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏ (UTC —á–∞—Å)
    pub daily_hour: u32,
    /// –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏ (0 = Sunday)
    pub weekly_day: u32,
    /// –î–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    pub monthly_day: u32,
    /// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏
    pub min_importance_threshold: f32,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–º—è—Ç–µ–π –¥–ª—è –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏ –∑–∞ —Ä–∞–∑
    pub max_memories_per_batch: usize,
    /// –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏
    pub operation_timeout_minutes: u64,
}

impl Default for DistillationConfig {
    fn default() -> Self {
        Self {
            enabled: true,
            daily_hour: 2,           // 2 AM UTC
            weekly_day: 0,           // Sunday
            monthly_day: 1,          // 1st of month
            min_importance_threshold: 0.3,
            max_memories_per_batch: 1000,
            operation_timeout_minutes: 30,
        }
    }
}

/// –¢–∏–ø—ã –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏ –ø–∞–º—è—Ç–∏
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum DistillationType {
    /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    ConversationHighlights {
        importance_threshold: f32,
        max_highlights: usize,
    },
    /// –í—ã—è–≤–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º
    ProblemSolutionPatterns {
        min_frequency: u32,
        solution_confidence: f32,
    },
    /// –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    UserPreferenceLearning {
        learning_window: Duration,
        confidence_threshold: f32,
    },
    /// –°–∏–Ω—Ç–µ–∑ –∑–Ω–∞–Ω–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    CrossDomainKnowledgeSynthesis {
        domains: Vec<String>,
        synthesis_depth: SynthesisDepth,
    },
}

/// –ì–ª—É–±–∏–Ω–∞ —Å–∏–Ω—Ç–µ–∑–∞ –∑–Ω–∞–Ω–∏–π
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum SynthesisDepth {
    Surface,     // –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–µ —Å–≤—è–∑–∏
    Intermediate, // –£–º–µ—Ä–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏
    Deep,        // –ì–ª—É–±–æ–∫–∏–µ —Å–≤—è–∑–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
}

/// –û—Ç—á–µ—Ç –æ –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DistillationReport {
    pub id: Uuid,
    pub distillation_type: DistillationType,
    pub start_time: DateTime<Utc>,
    pub end_time: DateTime<Utc>,
    pub duration_seconds: f64,
    pub memories_processed: usize,
    pub insights_generated: usize,
    pub patterns_discovered: usize,
    pub quality_score: f32,
    pub error_count: usize,
    pub details: HashMap<String, String>,
}

/// –û—Ç—á–µ—Ç –æ–± –∞–Ω–∞–ª–∏–∑–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PatternReport {
    pub id: Uuid,
    pub analysis_period: (DateTime<Utc>, DateTime<Utc>),
    pub patterns_found: Vec<PatternDiscovery>,
    pub trend_analysis: TrendAnalysis,
    pub recommendations: Vec<String>,
    pub confidence_score: f32,
}

/// –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PatternDiscovery {
    pub pattern_type: String,
    pub frequency: u32,
    pub confidence: f32,
    pub description: String,
    pub examples: Vec<String>,
    pub implications: Vec<String>,
}

/// –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TrendAnalysis {
    pub memory_growth_rate: f32,
    pub usage_patterns: HashMap<String, f32>,
    pub quality_trends: HashMap<String, f32>,
    pub performance_trends: HashMap<String, f32>,
}

/// –û—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OptimizationReport {
    pub id: Uuid,
    pub optimization_time: DateTime<Utc>,
    pub actions_taken: Vec<OptimizationAction>,
    pub performance_improvement: f32,
    pub storage_saved_mb: f32,
    pub quality_improvement: f32,
    pub recommendations: Vec<String>,
}

/// –î–µ–π—Å—Ç–≤–∏–µ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OptimizationAction {
    pub action_type: String,
    pub description: String,
    pub affected_memories: usize,
    pub impact_score: f32,
}

/// –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏
#[derive(Debug, Clone, Default)]
pub struct QualityMetrics {
    pub total_distillations: u64,
    pub successful_distillations: u64,
    pub average_quality_score: f32,
    pub average_duration_seconds: f32,
    pub insights_generated: u64,
    pub patterns_discovered: u64,
    pub last_successful_distillation: Option<DateTime<Utc>>,
}

/// –î–≤–∏–∂–æ–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏ –ø–∞–º—è—Ç–∏
pub struct MemoryDistillationEngine {
    orchestrator: Arc<MemoryOrchestrator>,
    memory_service: Arc<MemoryService>,
    config: DistillationConfig,
    quality_metrics: Arc<RwLock<QualityMetrics>>,
    running_tasks: Arc<Mutex<HashMap<String, bool>>>,
    shutdown_tx: broadcast::Sender<()>,
}

impl MemoryDistillationEngine {
    /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏
    pub fn new(
        orchestrator: Arc<MemoryOrchestrator>,
        memory_service: Arc<MemoryService>,
        config: DistillationConfig,
    ) -> Self {
        let (shutdown_tx, _) = broadcast::channel(16);
        
        Self {
            orchestrator,
            memory_service,
            config,
            quality_metrics: Arc::new(RwLock::new(QualityMetrics::default())),
            running_tasks: Arc::new(Mutex::new(HashMap::new())),
            shutdown_tx,
        }
    }

    /// Graceful shutdown –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏
    pub async fn shutdown(&self) -> Result<()> {
        info!("üõë Initiating graceful shutdown of distillation engine");
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª shutdown –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º
        if let Err(e) = self.shutdown_tx.send(()) {
            warn!("Failed to send shutdown signal: {}", e);
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        let mut attempts = 0;
        while attempts < 30 { // –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
            let running_tasks = self.running_tasks.lock().await;
            if running_tasks.values().all(|&running| !running) {
                break;
            }
            drop(running_tasks);
            
            sleep(TokioDuration::from_secs(1)).await;
            attempts += 1;
        }

        if attempts >= 30 {
            warn!("Some distillation tasks did not shutdown gracefully within 30 seconds");
        } else {
            info!("‚úÖ All distillation tasks shutdown gracefully");
        }

        Ok(())
    }

    /// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏
    pub async fn start_autonomous_distillation(&self) -> Result<()> {
        if !self.config.enabled {
            info!("Autonomous distillation is disabled");
            return Ok(());
        }

        info!("üß† Starting autonomous memory distillation engine");

        // –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏
        let daily_engine = Arc::new(self.clone());
        tokio::spawn(async move {
            daily_engine.run_daily_distillation().await;
        });

        // –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        let weekly_engine = Arc::new(self.clone());
        tokio::spawn(async move {
            weekly_engine.run_weekly_analysis().await;
        });

        // –ó–∞–ø—É—Å–∫ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        let monthly_engine = Arc::new(self.clone());
        tokio::spawn(async move {
            monthly_engine.run_monthly_optimization().await;
        });

        // –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        let learning_engine = Arc::new(self.clone());
        tokio::spawn(async move {
            learning_engine.run_continuous_learning().await;
        });

        info!("‚úÖ Autonomous distillation engine started successfully");
        Ok(())
    }

    /// –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    pub async fn daily_conversation_distillation(&self) -> Result<DistillationReport> {
        let start_time = Utc::now();
        info!("üåÖ Starting daily conversation distillation");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É
        if self.is_task_running("daily_distillation").await {
            return Err(anyhow!("Daily distillation is already running"));
        }

        self.mark_task_running("daily_distillation", true).await;

        let mut report = DistillationReport {
            id: Uuid::new_v4(),
            distillation_type: DistillationType::ConversationHighlights {
                importance_threshold: self.config.min_importance_threshold,
                max_highlights: 100,
            },
            start_time,
            end_time: Utc::now(),
            duration_seconds: 0.0,
            memories_processed: 0,
            insights_generated: 0,
            patterns_discovered: 0,
            quality_score: 0.0,
            error_count: 0,
            details: HashMap::new(),
        };

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        let recent_memories: Vec<MemoryCell> = match self.memory_service.search(
            "recent memories from last 24 hours",
            50,
        ).await {
            Ok(results) => results,
            Err(e) => {
                error!("Failed to fetch recent memories: {}", e);
                report.error_count += 1;
                self.mark_task_running("daily_distillation", false).await;
                return Ok(report);
            }
        };

        report.memories_processed = recent_memories.len();

        if recent_memories.is_empty() {
            info!("No memories to distill from the last 24 hours");
            self.mark_task_running("daily_distillation", false).await;
            return Ok(report);
        }

        // –î–∏—Å—Ç–∏–ª–ª—è—Ü–∏—è —á–µ—Ä–µ–∑ GPT-5-nano –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        let distillation_result = match self.orchestrator.optimize_memory_storage(&recent_memories).await {
            Ok(result) => result,
            Err(e) => {
                error!("Orchestrator distillation failed: {}", e);
                report.error_count += 1;
                self.mark_task_running("daily_distillation", false).await;
                return Ok(report);
            }
        };

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ MemoryCell –Ω–∞ –æ—Å–Ω–æ–≤–µ insights
        report.insights_generated = 1; // –ó–∞–≥–ª—É—à–∫–∞
        report.patterns_discovered = 1; // –ó–∞–≥–ª—É—à–∫–∞  
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º compression_ratio –∫–∞–∫ quality_score - –æ–Ω –æ—Ç—Ä–∞–∂–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏ –ø–∞–º—è—Ç–∏
        report.quality_score = distillation_result.compression_ratio;
        report.end_time = Utc::now();
        report.duration_seconds = (report.end_time - report.start_time).num_milliseconds() as f64 / 1000.0;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        self.update_quality_metrics(&report).await;

        info!("‚úÖ Daily distillation completed: {} insights generated, {} patterns found", 
              report.insights_generated, report.patterns_discovered);

        self.mark_task_running("daily_distillation", false).await;
        Ok(report)
    }

    /// –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    pub async fn weekly_pattern_analysis(&self) -> Result<PatternReport> {
        info!("üìä Starting weekly pattern analysis");

        if self.is_task_running("weekly_analysis").await {
            return Err(anyhow!("Weekly analysis is already running"));
        }

        self.mark_task_running("weekly_analysis", true).await;

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        let memories: Vec<MemoryCell> = match self.memory_service.search(
            "weekly analysis memories from past week",
            100
        ).await {
            Ok(results) => results,
            Err(e) => {
                error!("Failed to fetch weekly memories: {}", e);
                self.mark_task_running("weekly_analysis", false).await;
                return Err(e.into());
            }
        };

        // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        let analysis_result = self.orchestrator.analyze_memory_patterns(&memories).await?;

        let report = PatternReport {
            id: Uuid::new_v4(),
            analysis_period: (Utc::now() - Duration::days(7), Utc::now()),
            patterns_found: vec![PatternDiscovery {
                pattern_type: "weekly_trend".to_string(),
                frequency: 1,
                confidence: 0.8,
                description: "Weekly pattern analysis result".to_string(),
                examples: vec![analysis_result.clone()],
                implications: vec!["Weekly insights identified".to_string()],
            }],
            trend_analysis: TrendAnalysis {
                memory_growth_rate: 0.1,
                usage_patterns: HashMap::new(),
                quality_trends: HashMap::new(),
                performance_trends: HashMap::new(),
            },
            recommendations: vec!["Continue monitoring weekly patterns".to_string()],
            confidence_score: 0.8,
        };

        info!("‚úÖ Weekly pattern analysis completed: {} patterns found", 
              report.patterns_found.len());

        self.mark_task_running("weekly_analysis", false).await;
        Ok(report)
    }

    /// –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–º—è—Ç–∏
    pub async fn monthly_memory_optimization(&self) -> Result<OptimizationReport> {
        info!("üîß Starting monthly memory optimization");

        if self.is_task_running("monthly_optimization").await {
            return Err(anyhow!("Monthly optimization is already running"));
        }

        self.mark_task_running("monthly_optimization", true).await;

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        let all_memories: Vec<MemoryCell> = match self.memory_service.search(
            "monthly optimization all memories",
            200
        ).await {
            Ok(results) => results,
            Err(e) => {
                error!("Failed to fetch all memories: {}", e);
                self.mark_task_running("monthly_optimization", false).await;
                return Err(e.into());
            }
        };
        
        // –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        let optimization_result = self.orchestrator.optimize_memory_storage(&all_memories).await?;

        let actions = vec![OptimizationAction {
            action_type: "analyze_patterns".to_string(),
            description: "Analyzed memory patterns for optimization".to_string(),
            affected_memories: all_memories.len(),
            impact_score: optimization_result.compression_ratio, // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        }];

        let report = OptimizationReport {
            id: Uuid::new_v4(),
            optimization_time: Utc::now(),
            actions_taken: actions,
            performance_improvement: optimization_result.space_savings_percent, // –ü—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —ç–∫–æ–Ω–æ–º–∏—é –º–µ—Å—Ç–∞
            storage_saved_mb: optimization_result.space_savings_percent * 100.0, // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏
            quality_improvement: optimization_result.compression_ratio, // –ö–∞—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–∂–∞—Ç–∏–µ
            recommendations: vec!["Continue monthly optimization cycles".to_string()],
        };

        info!("‚úÖ Monthly optimization completed: {} actions taken, {:.2}% performance improvement", 
              report.actions_taken.len(), report.performance_improvement * 100.0);

        self.mark_task_running("monthly_optimization", false).await;
        Ok(report)
    }

    /// –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pub async fn continuous_preference_learning(&self) -> Result<()> {
        info!("üéì Starting continuous preference learning");

        // –ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        let mut interval = interval(TokioDuration::from_secs(4 * 3600));

        loop {
            interval.tick().await;
            
            if let Err(e) = self.learn_user_preferences().await {
                error!("Error in preference learning: {}", e);
            }
        }
    }

    /// –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async fn learn_user_preferences(&self) -> Result<()> {
        info!("üéì Learning user preferences - placeholder implementation");
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        let recent_memories: Vec<MemoryCell> = match self.memory_service.search(
            "user interactions and preferences",
            50
        ).await {
            Ok(results) => results,
            Err(e) => {
                warn!("Failed to fetch recent memories for preference learning: {}", e);
                return Ok(()); // –ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
            }
        };

        if recent_memories.is_empty() {
            debug!("No recent memories available for preference learning");
            return Ok(());
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ø–∞–º—è—Ç—è—Ö —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        match self.orchestrator.analyze_memory_patterns(&recent_memories).await {
            Ok(analysis) => {
                info!("‚úÖ Analyzed {} memories for user preference patterns", recent_memories.len());
                debug!("Pattern analysis result: {}", analysis);
            }
            Err(e) => {
                warn!("Failed to analyze preference patterns: {}", e);
            }
        }

        Ok(())
    }

    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
    async fn is_task_running(&self, task_name: &str) -> bool {
        self.running_tasks.lock().await
            .get(task_name)
            .copied()
            .unwrap_or(false)
    }

    async fn mark_task_running(&self, task_name: &str, running: bool) {
        self.running_tasks.lock().await
            .insert(task_name.to_string(), running);
    }

    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
    async fn update_quality_metrics(&self, report: &DistillationReport) {
        let mut metrics = self.quality_metrics.write().await;
        metrics.total_distillations += 1;
        
        if report.error_count == 0 {
            metrics.successful_distillations += 1;
            metrics.last_successful_distillation = Some(report.end_time);
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
        metrics.average_quality_score = (metrics.average_quality_score * (metrics.total_distillations - 1) as f32 + report.quality_score) / metrics.total_distillations as f32;
        metrics.average_duration_seconds = (metrics.average_duration_seconds * (metrics.total_distillations - 1) as f32 + report.duration_seconds as f32) / metrics.total_distillations as f32;
        metrics.insights_generated += report.insights_generated as u64;
        metrics.patterns_discovered += report.patterns_discovered as u64;
    }

    // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å graceful shutdown
    async fn run_daily_distillation(&self) {
        let mut interval = interval(TokioDuration::from_secs(3600)); // –ö–∞–∂–¥—ã–π —á–∞—Å –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        let mut shutdown_rx = self.shutdown_tx.subscribe();
        
        info!("üåÖ Daily distillation scheduler started");

        loop {
            tokio::select! {
                _ = interval.tick() => {
                    let now = Utc::now();
                    if now.hour() == self.config.daily_hour && now.minute() < 5 {
                        // Retry –ª–æ–≥–∏–∫–∞ —Å exponential backoff
                        if let Err(e) = self.retry_with_backoff(
                            || self.daily_conversation_distillation(),
                            3, // max_retries
                            TokioDuration::from_secs(5), // initial_delay
                        ).await {
                            error!("Daily distillation failed after retries: {}", e);
                        }
                    }
                }
                _ = shutdown_rx.recv() => {
                    info!("üõë Daily distillation scheduler received shutdown signal");
                    self.mark_task_running("daily_distillation", false).await;
                    break;
                }
            }
        }
        
        info!("‚úÖ Daily distillation scheduler shutdown complete");
    }

    async fn run_weekly_analysis(&self) {
        let mut interval = interval(TokioDuration::from_secs(3600)); // –ö–∞–∂–¥—ã–π —á–∞—Å –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        let mut shutdown_rx = self.shutdown_tx.subscribe();
        
        info!("üìä Weekly analysis scheduler started");

        loop {
            tokio::select! {
                _ = interval.tick() => {
                    let now = Utc::now();
                    if now.weekday().num_days_from_sunday() == self.config.weekly_day 
                       && now.hour() == self.config.daily_hour + 1 
                       && now.minute() < 5 {
                        if let Err(e) = self.retry_with_backoff(
                            || self.weekly_pattern_analysis(),
                            3, // max_retries
                            TokioDuration::from_secs(10), // initial_delay
                        ).await {
                            error!("Weekly analysis failed after retries: {}", e);
                        }
                    }
                }
                _ = shutdown_rx.recv() => {
                    info!("üõë Weekly analysis scheduler received shutdown signal");
                    self.mark_task_running("weekly_analysis", false).await;
                    break;
                }
            }
        }
        
        info!("‚úÖ Weekly analysis scheduler shutdown complete");
    }

    async fn run_monthly_optimization(&self) {
        let mut interval = interval(TokioDuration::from_secs(86400)); // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ–≤–µ—Ä—è–µ–º (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        let mut shutdown_rx = self.shutdown_tx.subscribe();
        
        info!("üîß Monthly optimization scheduler started");

        loop {
            tokio::select! {
                _ = interval.tick() => {
                    let now = Utc::now();
                    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
                    let target_hour = (self.config.daily_hour + 2) % 24; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤
                    
                    if now.day() == self.config.monthly_day 
                       && now.hour() == target_hour 
                       && now.minute() < 30 {  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                        info!("üóìÔ∏è Monthly optimization triggered on day {} at {}:{:02}", 
                             now.day(), now.hour(), now.minute());
                        
                        if let Err(e) = self.retry_with_backoff(
                            || self.monthly_memory_optimization(),
                            5, // max_retries (–±–æ–ª—å—à–µ –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏)
                            TokioDuration::from_secs(30), // initial_delay
                        ).await {
                            error!("Monthly optimization failed after retries: {}", e);
                        }
                    }
                }
                _ = shutdown_rx.recv() => {
                    info!("üõë Monthly optimization scheduler received shutdown signal");
                    self.mark_task_running("monthly_optimization", false).await;
                    break;
                }
            }
        }
        
        info!("‚úÖ Monthly optimization scheduler shutdown complete");
    }

    async fn run_continuous_learning(&self) {
        let mut shutdown_rx = self.shutdown_tx.subscribe();
        
        info!("üéì Continuous learning scheduler started");

        tokio::select! {
            result = self.retry_with_backoff(
                || self.continuous_preference_learning(),
                3, // max_retries
                TokioDuration::from_secs(10), // initial_delay
            ) => {
                if let Err(e) = result {
                    error!("Continuous learning failed after retries: {}", e);
                }
            }
            _ = shutdown_rx.recv() => {
                info!("üõë Continuous learning received shutdown signal");
            }
        }
        
        info!("‚úÖ Continuous learning scheduler shutdown complete");
    }

    /// Retry –ª–æ–≥–∏–∫–∞ —Å exponential backoff –¥–ª—è orchestrator –≤—ã–∑–æ–≤–æ–≤
    async fn retry_with_backoff<F, Fut, T>(&self, operation: F, max_retries: u32, initial_delay: TokioDuration) -> Result<T>
    where
        F: Fn() -> Fut,
        Fut: std::future::Future<Output = Result<T>>,
    {
        let mut delay = initial_delay;
        let mut last_error = None;

        for attempt in 0..=max_retries {
            match operation().await {
                Ok(result) => {
                    if attempt > 0 {
                        info!("Operation succeeded after {} retries", attempt);
                    }
                    return Ok(result);
                }
                Err(e) => {
                    last_error = Some(e);
                    
                    if attempt < max_retries {
                        warn!("Operation failed (attempt {}/{}), retrying in {:?}", 
                             attempt + 1, max_retries + 1, delay);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ shutdown –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                        let mut shutdown_rx = self.shutdown_tx.subscribe();
                        tokio::select! {
                            _ = sleep(delay) => {}
                            _ = shutdown_rx.recv() => {
                                return Err(anyhow!("Operation cancelled due to shutdown"));
                            }
                        }
                        
                        // Exponential backoff —Å jitter
                        delay = std::cmp::min(
                            delay * 2 + TokioDuration::from_millis(fastrand::u64(0..1000)),
                            TokioDuration::from_secs(300) // –º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
                        );
                    }
                }
            }
        }

        Err(last_error.unwrap_or_else(|| anyhow!("Operation failed after {} retries", max_retries)))
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
    pub async fn get_quality_metrics(&self) -> QualityMetrics {
        self.quality_metrics.read().await.clone()
    }
}

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Clone –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è Arc
impl Clone for MemoryDistillationEngine {
    fn clone(&self) -> Self {
        Self {
            orchestrator: self.orchestrator.clone(),
            memory_service: self.memory_service.clone(),
            config: self.config.clone(),
            quality_metrics: self.quality_metrics.clone(),
            running_tasks: self.running_tasks.clone(),
            shutdown_tx: self.shutdown_tx.clone(),
            // shutdown_rx —Å–æ–∑–¥–∞–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ subscribe() –≤ –∫–∞–∂–¥–æ–º –º–µ—Ç–æ–¥–µ
        }
    }
}
