#!/usr/bin/env python3
"""
Real Memory Quality Test - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π AI Memory Service
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import requests
import json
import time
from datetime import datetime
from typing import List, Dict, Any
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE = "http://localhost:8080"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞–º—è—Ç–∏
REAL_TEST_MEMORIES = [
    {
        "content": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Rust –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑-–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏ –∏ –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "context": "programming_preferences",
        "importance": 0.9,
        "tags": ["rust", "programming", "performance", "safety"]
    },
    {
        "content": "–í –ø—Ä–æ–µ–∫—Ç–µ AI Memory Service –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Neo4j –¥–ª—è –≥—Ä–∞—Ñ–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ EmbeddingGemma –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π",
        "context": "project_architecture",
        "importance": 0.95,
        "tags": ["neo4j", "embeddinggemma", "architecture", "database"]
    },
    {
        "content": "GPT-5-nano –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º max_completion_tokens –≤–º–µ—Å—Ç–æ max_tokens –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API",
        "context": "api_configuration",
        "importance": 0.8,
        "tags": ["gpt5", "api", "configuration", "tokens"]
    },
    {
        "content": "–°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–æ embeddings 83.6% –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤",
        "context": "performance_metrics",
        "importance": 0.85,
        "tags": ["embeddings", "quality", "metrics", "optimization"]
    },
    {
        "content": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–∞—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ —Ç—Ä–µ–±—É–µ—Ç thread-safe —Ä–µ—à–µ–Ω–∏–π",
        "context": "user_requirements",
        "importance": 0.75,
        "tags": ["multithreading", "safety", "requirements", "concurrent"]
    }
]

# –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞
TEST_QUERIES = [
    {
        "query": "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏?",
        "expected_context": "project_architecture",
        "expected_keywords": ["neo4j", "embeddinggemma", "database", "–≥—Ä–∞—Ñ"]
    },
    {
        "query": "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω GPT-5 –≤ —Å–∏—Å—Ç–µ–º–µ?",
        "expected_context": "api_configuration",
        "expected_keywords": ["gpt5", "max_completion_tokens", "api"]
    },
    {
        "query": "–ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑–∞–ª–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è embeddings?",
        "expected_context": "performance_metrics",
        "expected_keywords": ["83.6%", "–∫–∞—á–µ—Å—Ç–≤–æ", "embeddings"]
    },
    {
        "query": "–ö–∞–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏?",
        "expected_context": "programming_preferences",
        "expected_keywords": ["rust", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]
    }
]

def store_memory(memory: Dict[str, Any]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É"""
    try:
        response = requests.post(
            f"{API_BASE}/memory",
            json=memory,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False

def search_memory(query: str, limit: int = 5) -> List[Dict[str, Any]]:
    """–ü–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    try:
        response = requests.post(
            f"{API_BASE}/search",
            json={"query": query, "limit": limit},
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        if response.status_code == 200:
            return response.json().get("results", [])
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return []

def evaluate_memory_quality(query_data: Dict, search_results: List[Dict]) -> float:
    """–û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    if not search_results:
        return 0.0
    
    quality_score = 0.0
    total_weight = 0.0
    
    for i, result in enumerate(search_results[:3]):  # –¢–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        weight = 1.0 / (i + 1)  # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
        total_weight += weight
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context_match = result.get("context") == query_data["expected_context"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        content = result.get("content", "").lower()
        keyword_matches = sum(1 for keyword in query_data["expected_keywords"] 
                            if keyword.lower() in content)
        keyword_score = keyword_matches / len(query_data["expected_keywords"])
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_score = (0.4 * (1.0 if context_match else 0.0)) + (0.6 * keyword_score)
        quality_score += result_score * weight
    
    return quality_score / total_weight if total_weight > 0 else 0.0

def run_memory_quality_test():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞–º—è—Ç–∏"""
    print("üß† –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –ö–ê–ß–ï–°–¢–í–ê –í–û–°–ü–û–ú–ò–ù–ê–ù–ò–ô AI MEMORY SERVICE")
    print("=" * 65)
    
    # 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
    print("\nüìù –≠—Ç–∞–ø 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    stored_count = 0
    for i, memory in enumerate(REAL_TEST_MEMORIES):
        if store_memory(memory):
            stored_count += 1
            print(f"‚úÖ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ {i+1}/5 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è {i+1}")
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    print(f"\nüìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {stored_count}/5 –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    if stored_count == 0:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–∏ –æ–¥–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        return
    
    # –ü–∞—É–∑–∞ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (10 —Å–µ–∫)...")
    time.sleep(10)
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
    print("\nüîç –≠—Ç–∞–ø 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞...")
    total_quality = 0.0
    successful_queries = 0
    
    for i, query_test in enumerate(TEST_QUERIES):
        print(f"\nüîç –ó–∞–ø—Ä–æ—Å {i+1}: {query_test['query']}")
        
        results = search_memory(query_test['query'])
        if results:
            quality = evaluate_memory_quality(query_test, results)
            total_quality += quality
            successful_queries += 1
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            print(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {quality*100:.1f}%")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if results:
                best = results[0]
                print(f"ü•á –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best.get('content', 'N/A')[:100]}...")
        else:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # 3. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\n" + "="*65)
    print("üèÜ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    
    if successful_queries > 0:
        avg_quality = (total_quality / successful_queries) * 100
        print(f"üìä –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_queries}/{len(TEST_QUERIES)}")
        print(f"‚≠ê –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {avg_quality:.1f}%")
        
        if avg_quality >= 80:
            print("‚úÖ –û–¢–õ–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ!")
        elif avg_quality >= 60:
            print("‚ö†Ô∏è –•–û–†–û–®–û: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        else:
            print("‚ùå –ü–õ–û–•–û: –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    else:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç!")
    
    print(f"\nüïí –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    run_memory_quality_test()