# AI Memory Service with HTTP-based Embedding Architecture
# Production-ready secure configuration with environment-driven secrets

services:
  # Neo4j Graph Database for memory relationships  
  neo4j:
    image: neo4j:5.19-community
    container_name: ai-memory-neo4j
    restart: unless-stopped
    ports:
      # Only expose ports in development profile
      - target: 7474
        published: 7474
        mode: host
        protocol: tcp
      - target: 7687
        published: 7687
        mode: host
        protocol: tcp
    environment:
      # SECURITY: Strong password required via environment variable
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:?Error - NEO4J_PASSWORD environment variable is required}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_dbms_memory_heap_initial__size=512M
      
      # SECURITY: Limited APOC procedures only for memory operations
      - NEO4J_dbms_security_procedures_allowlist=apoc.create.*,apoc.load.*,apoc.meta.*,apoc.cypher.*
      - NEO4J_dbms_security_procedures_unrestricted=
      
      # SECURITY: Network and transaction limits
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474
      - NEO4J_dbms_tx_timeout=60s
      - NEO4J_dbms_max_query_execution_time=120s
      
      # SECURITY: Enable security logging
      - NEO4J_dbms_logs_security_level=INFO
      - NEO4J_dbms_security_auth_enabled=true
      
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_plugins:/plugins
    networks:
      - ai-memory-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "RETURN 1 AS health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: false  # Neo4j needs write access to /data
    tmpfs:
      - /tmp
      - /var/tmp

  # Python Embedding Server (Handles ML processing)
  embedding-server:
    build:
      context: .
      dockerfile: Dockerfile.embedding
    container_name: ai-memory-embedding
    restart: unless-stopped
    expose:
      - "8090"  # Internal network only - no host exposure
    environment:
      # Model Configuration - REQUIRED
      - MODEL_PATH=${MODEL_PATH:?Error - MODEL_PATH environment variable is required}
      - EMBEDDING_SERVER_HOST=0.0.0.0
      - EMBEDDING_SERVER_PORT=8090
      - MAX_WORKERS=${EMBEDDING_MAX_WORKERS:-4}
      
      # Performance Settings
      - BATCH_SIZE=${EMBEDDING_BATCH_SIZE:-8}
      - MAX_SEQUENCE_LENGTH=${MAX_SEQUENCE_LENGTH:-2048}
      - EMBEDDING_TIMEOUT=${EMBEDDING_TIMEOUT:-30}
      
      # SECURITY: Logging configuration
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=${EMBEDDING_LOG_LEVEL:-INFO}
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONHASHSEED=random
      
      # SECURITY: Python security settings
      - PYTHONFAULTHANDLER=1
      - PYTHONMALLOC=malloc
      
    volumes:
      # SECURITY: Read-only model access
      - ${MODELS_PATH:?Error - MODELS_PATH environment variable is required}:/app/models:ro
      - embedding_cache:/app/cache
      - embedding_logs:/app/logs
    networks:
      - ai-memory-network
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:8090/health', timeout=10).raise_for_status()"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 180s  # Allow time for model loading
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '2.0'
        reservations:
          memory: 3G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
      - /app/cache

  # Rust Memory Service (HTTP client to embedding server)
  memory-server:
    build:
      context: .
      dockerfile: Dockerfile.memory
    container_name: ai-memory-service
    restart: unless-stopped
    ports:
      - target: 8080
        published: 8080
        mode: host
        protocol: tcp
    environment:
      # SECURITY: Required credentials
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:?Error - NEO4J_PASSWORD environment variable is required}
      - OPENAI_API_KEY=${OPENAI_API_KEY:?Error - OPENAI_API_KEY environment variable is required}
      
      # Service Configuration
      - RUST_LOG=${RUST_LOG:-info,ai_memory_service=debug}
      - RUST_BACKTRACE=${RUST_BACKTRACE:-1}
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8080
      - WORKERS=${WORKERS:-4}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      
      # SECURITY: Specific CORS origins (no wildcards)
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080,https://yourdomain.com}
      
      # Neo4j Configuration
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_POOL_SIZE=${NEO4J_POOL_SIZE:-10}
      
      # Embedding HTTP Configuration - Internal network only
      - EMBEDDING_SERVER_URL=http://embedding-server:8090
      - EMBEDDING_TIMEOUT=${EMBEDDING_TIMEOUT:-30}
      - EMBEDDING_MAX_CONCURRENT=${EMBEDDING_MAX_CONCURRENT:-4}
      
      # Cache Configuration
      - L1_CACHE_SIZE=${L1_CACHE_SIZE:-1000}
      - L2_CACHE_SIZE=${L2_CACHE_SIZE:-10000}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - CACHE_COMPRESSION=${CACHE_COMPRESSION:-true}
      
      # AI Brain Configuration
      - MAX_MEMORIES=${MAX_MEMORIES:-100000}
      - IMPORTANCE_THRESHOLD=${IMPORTANCE_THRESHOLD:-0.3}
      - CONSOLIDATION_INTERVAL=${CONSOLIDATION_INTERVAL:-300}
      - MEMORY_DECAY_RATE=${MEMORY_DECAY_RATE:-0.01}
      
      # GPT Orchestrator Configuration  
      - ORCHESTRATOR_MODEL=${ORCHESTRATOR_MODEL:-gpt-5-nano}
      - MAX_INPUT_TOKENS=${MAX_INPUT_TOKENS:-400000}
      - MAX_OUTPUT_TOKENS=${MAX_OUTPUT_TOKENS:-12000}
      - ORCHESTRATOR_TEMPERATURE=${ORCHESTRATOR_TEMPERATURE:-1.0}
      - ORCHESTRATOR_TIMEOUT=${ORCHESTRATOR_TIMEOUT:-120}

    volumes:
      # Configuration and data persistence
      - memory_data:/app/data
      - memory_logs:/app/logs
      - memory_cache:/app/cache
      - ./config:/app/config:ro
    networks:
      - ai-memory-network
    depends_on:
      neo4j:
        condition: service_healthy
      embedding-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "-s", "--max-time", "10", "http://localhost:8080/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '1.5'
        reservations:
          memory: 2G
          cpus: '0.8'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
      - /app/cache

  # Optional: Redis for additional caching (disabled by default)
  redis:
    image: redis:7-alpine
    container_name: ai-memory-redis
    restart: unless-stopped
    expose:
      - "6379"  # Internal network only
    environment:
      # SECURITY: Redis authentication required in production
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - ai-memory-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - caching
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-memory-prometheus
    restart: unless-stopped
    expose:
      - "9090"  # Internal network only
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ai-memory-network
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      # SECURITY: Disable admin API
      - '--web.enable-admin-api=false'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai-memory-grafana
    restart: unless-stopped
    expose:
      - "3000"  # Internal network only
    environment:
      # SECURITY: Strong admin password required
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:?Error - GRAFANA_PASSWORD required for monitoring profile}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=redis-datasource
      - GF_SECURITY_ALLOW_EMBEDDING=false  # Security: Disable embedding
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ai-memory-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true

# Network configuration with security
networks:
  ai-memory-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/24
          gateway: 172.25.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: "1500"

# Persistent volumes with proper drivers
volumes:
  # Neo4j data persistence
  neo4j_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH:-./data}/neo4j
      o: bind
  neo4j_logs:
    driver: local
  neo4j_plugins:
    driver: local
  
  # Embedding Server data persistence
  embedding_cache:
    driver: local
  embedding_logs:
    driver: local
  
  # Memory Server data persistence
  memory_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH:-./data}/memory
      o: bind
  memory_logs:
    driver: local
  memory_cache:
    driver: local
  
  # Optional services data persistence
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local