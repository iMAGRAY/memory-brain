# Neo4j Native Installation Script for Windows
# Downloads and configures Neo4j Community Edition without Docker

param(
    [string]$Neo4jVersion = "5.19.0",
    [string]$InstallPath = "C:\Neo4j",
    [string]$DatabasePath = "C:\Neo4j\data",
    [string]$Password = "password"
)

Write-Host "üóÇÔ∏è Neo4j Native Installation Script" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan

# Check if running as administrator
if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "‚ùå This script requires Administrator privileges" -ForegroundColor Red
    Write-Host "Right-click and 'Run as Administrator'" -ForegroundColor Yellow
    exit 1
}

# Check Java installation
Write-Host "`n1. Checking Java installation..." -ForegroundColor Yellow
try {
    $javaVersion = java -version 2>&1 | Select-String "version"
    if ($javaVersion -match '"(\d+)\.') {
        $javaMajorVersion = [int]$matches[1]
        if ($javaMajorVersion -ge 17) {
            Write-Host "  ‚úÖ Java $javaMajorVersion detected - compatible" -ForegroundColor Green
        } else {
            Write-Host "  ‚ùå Java $javaMajorVersion is too old. Neo4j requires Java 17+" -ForegroundColor Red
            Write-Host "  üì• Installing OpenJDK 17..." -ForegroundColor Yellow
            
            # Download and install OpenJDK 17
            $jdkUrl = "https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_windows-x64_bin.zip"
            $jdkPath = "$env:TEMP\openjdk-17.zip"
            
            Invoke-WebRequest -Uri $jdkUrl -OutFile $jdkPath
            Expand-Archive -Path $jdkPath -DestinationPath "C:\Program Files\Java\" -Force
            
            # Set JAVA_HOME
            $javaHome = "C:\Program Files\Java\jdk-17.0.2"
            [Environment]::SetEnvironmentVariable("JAVA_HOME", $javaHome, "Machine")
            [Environment]::SetEnvironmentVariable("PATH", "$env:PATH;$javaHome\bin", "Machine")
            
            Write-Host "  ‚úÖ OpenJDK 17 installed" -ForegroundColor Green
        }
    }
} catch {
    Write-Host "  ‚ùå Java not found. Installing OpenJDK 17..." -ForegroundColor Red
    # Install Java as above
}

# Download Neo4j Community Edition
Write-Host "`n2. Downloading Neo4j Community Edition..." -ForegroundColor Yellow
$neo4jUrl = "https://dist.neo4j.org/neo4j-community-$Neo4jVersion-windows.zip"
$neo4jZip = "$env:TEMP\neo4j-community-$Neo4jVersion.zip"

try {
    Write-Host "  üì• Downloading from: $neo4jUrl" -ForegroundColor Cyan
    Invoke-WebRequest -Uri $neo4jUrl -OutFile $neo4jZip -UseBasicParsing
    Write-Host "  ‚úÖ Downloaded successfully" -ForegroundColor Green
} catch {
    Write-Host "  ‚ùå Failed to download Neo4j: $_" -ForegroundColor Red
    exit 1
}

# Extract Neo4j
Write-Host "`n3. Installing Neo4j..." -ForegroundColor Yellow
try {
    if (Test-Path $InstallPath) {
        Remove-Item -Path $InstallPath -Recurse -Force
    }
    
    New-Item -ItemType Directory -Path $InstallPath -Force | Out-Null
    Expand-Archive -Path $neo4jZip -DestinationPath $InstallPath -Force
    
    # Move extracted folder contents up one level
    $extractedFolder = Get-ChildItem -Path $InstallPath -Directory | Where-Object { $_.Name -like "*neo4j*" } | Select-Object -First 1
    if ($extractedFolder) {
        Get-ChildItem -Path $extractedFolder.FullName | Move-Item -Destination $InstallPath -Force
        Remove-Item -Path $extractedFolder.FullName -Force
    }
    
    Write-Host "  ‚úÖ Neo4j extracted to: $InstallPath" -ForegroundColor Green
} catch {
    Write-Host "  ‚ùå Failed to extract Neo4j: $_" -ForegroundColor Red
    exit 1
}

# Configure Neo4j
Write-Host "`n4. Configuring Neo4j..." -ForegroundColor Yellow
$configFile = "$InstallPath\conf\neo4j.conf"
$configContent = @"
# Neo4j AI Memory Service Configuration
# Generated by setup script

# Database location
server.database.default_database=neo4j
server.database.writable=true

# Network configuration
server.default_listen_address=0.0.0.0
server.bolt.listen_address=:7687
server.http.listen_address=:7474

# Memory settings (adjust based on available RAM)
server.memory.heap.initial_size=1g
server.memory.heap.max_size=2g
server.memory.pagecache.size=1g

# Security
server.bolt.enabled=true
server.http.enabled=true

# Logging
server.logs.user.filename=neo4j.log
server.logs.user.threshold=INFO

# Performance
server.bolt.thread_pool_min_size=5
server.bolt.thread_pool_max_size=400

# AI Memory Service specific
dbms.security.procedures.unrestricted=apoc.*,gds.*
dbms.security.procedures.allowlist=apoc.*,gds.*

# Data directories
server.directories.data=$DatabasePath
server.directories.logs=$InstallPath\logs
server.directories.import=$InstallPath\import

# Enable apoc and gds plugins
dbms.unmanaged_extension_classes=n10s.endpoint=/rdf

"@

try {
    $configContent | Out-File -FilePath $configFile -Encoding UTF8 -Force
    Write-Host "  ‚úÖ Configuration file created" -ForegroundColor Green
} catch {
    Write-Host "  ‚ùå Failed to create configuration: $_" -ForegroundColor Red
}

# Set initial password
Write-Host "`n5. Setting initial password..." -ForegroundColor Yellow
try {
    & "$InstallPath\bin\neo4j-admin.bat" dbms set-initial-password $Password
    Write-Host "  ‚úÖ Password set to: $Password" -ForegroundColor Green
} catch {
    Write-Host "  ‚ö†Ô∏è  Password setting might have failed - you can set it manually later" -ForegroundColor Yellow
}

# Create Windows Service
Write-Host "`n6. Installing Windows Service..." -ForegroundColor Yellow
try {
    & "$InstallPath\bin\neo4j.bat" install-service
    Write-Host "  ‚úÖ Neo4j Windows Service installed" -ForegroundColor Green
    
    # Start the service
    Start-Service -Name "Neo4j"
    Write-Host "  ‚úÖ Neo4j service started" -ForegroundColor Green
} catch {
    Write-Host "  ‚ö†Ô∏è  Service installation failed. You can start manually with:" -ForegroundColor Yellow
    Write-Host "     $InstallPath\bin\neo4j.bat start" -ForegroundColor Cyan
}

# Create shortcut scripts
Write-Host "`n7. Creating management scripts..." -ForegroundColor Yellow

$startScript = @"
@echo off
echo Starting Neo4j...
"$InstallPath\bin\neo4j.bat" start
pause
"@

$stopScript = @"
@echo off
echo Stopping Neo4j...
"$InstallPath\bin\neo4j.bat" stop
pause
"@

$statusScript = @"
@echo off
echo Neo4j Status:
"$InstallPath\bin\neo4j.bat" status
echo.
echo Browse to: http://localhost:7474
echo Username: neo4j
echo Password: $Password
pause
"@

$startScript | Out-File -FilePath "$InstallPath\start-neo4j.bat" -Encoding ASCII -Force
$stopScript | Out-File -FilePath "$InstallPath\stop-neo4j.bat" -Encoding ASCII -Force
$statusScript | Out-File -FilePath "$InstallPath\neo4j-info.bat" -Encoding ASCII -Force

Write-Host "  ‚úÖ Management scripts created" -ForegroundColor Green

# Add to PATH
Write-Host "`n8. Adding to system PATH..." -ForegroundColor Yellow
$currentPath = [Environment]::GetEnvironmentVariable("PATH", "Machine")
if ($currentPath -notlike "*$InstallPath\bin*") {
    [Environment]::SetEnvironmentVariable("PATH", "$currentPath;$InstallPath\bin", "Machine")
    Write-Host "  ‚úÖ Added to system PATH" -ForegroundColor Green
} else {
    Write-Host "  ‚ÑπÔ∏è  Already in PATH" -ForegroundColor Cyan
}

# Wait for Neo4j to start
Write-Host "`n9. Waiting for Neo4j to start..." -ForegroundColor Yellow
$timeout = 60
$elapsed = 0
do {
    Start-Sleep -Seconds 2
    $elapsed += 2
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:7474" -UseBasicParsing -TimeoutSec 5
        if ($response.StatusCode -eq 200) {
            Write-Host "  ‚úÖ Neo4j is responding!" -ForegroundColor Green
            break
        }
    } catch {
        Write-Host "  ‚è≥ Still waiting... ($elapsed/$timeout seconds)" -ForegroundColor Yellow
    }
} while ($elapsed -lt $timeout)

# Cleanup
Remove-Item -Path $neo4jZip -Force -ErrorAction SilentlyContinue

# Final summary
Write-Host "`nüéØ Neo4j Installation Complete!" -ForegroundColor Green
Write-Host "=================================" -ForegroundColor Green
Write-Host "üìç Installation path: $InstallPath" -ForegroundColor Cyan
Write-Host "üåê Web interface: http://localhost:7474" -ForegroundColor Cyan
Write-Host "üîå Bolt connection: bolt://localhost:7687" -ForegroundColor Cyan
Write-Host "üë§ Username: neo4j" -ForegroundColor Cyan
Write-Host "üîë Password: $Password" -ForegroundColor Cyan
Write-Host "" -ForegroundColor White
Write-Host "Management commands:" -ForegroundColor Yellow
Write-Host "  Start:  $InstallPath\start-neo4j.bat" -ForegroundColor Cyan
Write-Host "  Stop:   $InstallPath\stop-neo4j.bat" -ForegroundColor Cyan
Write-Host "  Status: $InstallPath\neo4j-info.bat" -ForegroundColor Cyan
Write-Host "" -ForegroundColor White
Write-Host "Or use Windows Services (services.msc) to manage Neo4j service" -ForegroundColor Gray

Write-Host "`n‚ú® Ready to test AI Memory Service with Neo4j!" -ForegroundColor Green