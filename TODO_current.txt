# Project TODO (Deterministic Roadmap)

## Scope & Goals
- Deliver robust, human-like long‑term memory with inter‑session context.
- Keep architecture intact; apply surgical, verifiable improvements only.
- Ensure deterministic build, run, and tests via mock services and scripted checks.

## Deterministic Environment
- Mock Embeddings (512D): `make mock-embed` (port 8090)
- Neo4j (bolt://localhost:7688): `make neo4j-up`
- Build/Verify: `make verify` (runs scripts/verify.sh)
- Stability flags: `ORCHESTRATOR_FORCE_DISABLE=true`, `DISABLE_SCHEDULERS=true`

## Milestones (with Acceptance Criteria)
1) Stabilize API server lifecycle
   - Add/keep graceful shutdown; no spontaneous exits for ≥ 60s idle.
   - Criteria: make verify passes twice in a row; port 8080 stays open ≥ 60s.

2) API compatibility & UX
   - Keep existing routes; support aliases: /memories, /memories/search, /api/memory/*.
   - Compat search returns {"memories":[], "count":N, "success":true}.
   - Criteria: curl suite in verify shows 200s and expected shapes.

3) Embedding dimension coherence (512D Matryoshka)
   - Default 512D; prefer autodetect from embedding server (/stats).
   - Criteria: /memory response embedding_dimension=512; /search vectors length=512 or truncated consistently.

4) Inter‑session context quality
   - Confirm context path saving and retrieval; enrich relationships when available.
   - Criteria: After storing memories in different contexts, /contexts and /context/:path reflect counts; /search respects context filters.

5) Observability & limits
   - Trace critical steps (init, index rebuild, requests). Validate request size/limit guards.
   - Criteria: No panics in logs; 4xx on invalid inputs; no hangs under rapid 5 QPS for 30s.

6) Deterministic tests hardening
   - Keep scripts/verify.sh green; add retry/wait logic where needed; avoid external dependencies.
   - Criteria: verify exits 0 locally on clean env.

7) Context graph enrichment (human-like linking)
   - Add higher-level relationships: co-occurrence within time windows; link contexts discovered via search.
   - Keep writes minimal: reuse existing GraphStorage methods; add only lightweight relationship creation in service layer.
   - Criteria: after N inserts in related contexts, `/contexts` shows non-zero counts; advanced recall returns connected memories.

8) Decay & consolidation (memory hygiene)
   - Implement decay: periodic importance attenuation using `brain.decay_rate`; floor at config threshold.
   - Consolidate: deduplicate near-duplicates; compress summaries into distilled nodes (via existing distillation engine when enabled).
   - Criteria: after 24h simulated ticks, low-importance items drop rank; duplicates reduced (Δcount ≥ 10% in synthetic set).

9) Observability & limits
   - Expose Prometheus metrics (counters: requests, errors; histograms: recall latency, embedding latency; gauges: cache size).
   - Tighten guards: total payload ≤ 1MB, limit ≤ 100, similarity threshold ∈ [0,1]; concurrency per route ≤ configurable.
   - Criteria: `/metrics` exports series; verify.sh shows p95 recall < 200ms for 10 stored items on dev box.

10) Failure handling & graceful degradation
   - If embedding server unavailable: return 503 for store/search with actionable message; keep health green with substatus.
   - Add retry (bounded) for Neo4j connects; timeouts for external calls.
   - Criteria: killing mock-embed → store/search fail fast (≤ 1s), server keeps serving /health and /stats.

## Validation Protocol
- Before/after any change: `make verify`.
- If flakiness occurs, capture /tmp/* logs, fix root cause, re‑verify.
 - Weekly: run a 30s smoke (5 QPS search) to check for stability (no panics, steady latency).

## Out‑of‑Scope (for now)
- Cloud infra, CI, GPU acceleration, production orchestrator.

